Abandoning the streamlited branch. For my vision to work properly, I will need to refactor the codebase.
Goal: Have two versions of the tool: CLI and GUI (Streamlit)

First steps:
1. Refactor the modules and functions to perform actions and not perform any user input (Unless it's input validation for CLI)
2. Create a CLI.py - a version handling user inputs only.
3. Create GUI.py - a version handling GUI user inputs.
These two files should be feature equivalent.
4. Make Cert generation optional, as it is only required for company computers using VPNs with cert override.

input modules will probably need to be separate for both GUI and CLI versions, but I'd like to keep as much of the data processing as common functions as possible.



Progress notes on modules:
__init__ - 
auth.py - no user interaction, need to add option to use cert or no ✔
channel.py - User interactive functions: getChannelSize - this function also contains a lot of additional checks and calculations, therefore will need to be split.
libraries.py - User interactive functions: changeAutoDeleteSettings, getLibraries. getLibraries is fairly short and selfcontained and will not require a lot of work. changeAutoDeleteSettings on the other hand does a lot of things.
reservations.py - User interactive functions: getBookingHistory - requires datetimes, resource IDs, and and confirmations, validateDateTime - this one could be as is for CLI functions, maybe will move it to a CLIutils module.
sslUtils.py - no user interaction, therefore no changes required - more a check in code to ask user if it is required - maybe have a setup to save preference.
utils.py - no user interaction, therefore no changes required ✔

Functions - Channel:
getChannel: gets a response with content for the channel - removed all print statements - no user input, but renaming to getChannelInfo

parseChannel: Turns the response into a data frame - no input

extractContentToDf: Filters the DF down to include content IDs, and if they're enabled or expired - no input

requestContent: requests information on  a single piece of content, returns a full json - no user input

calculateSize: downloads content for all items in IDlist in a loop, finds the value for size and adds it to a list, handles errors and adds the error to global list and variable, sums the values in the list. - will need to handle TQDM for CLI and streamlit for GUI - Made a dataclass that will work with streamlit and cli.

roundResult: rounds the resulting sum and presents it in a human readable format using the nearest correct factor. - no user input

getChannelSize: The main function in this module. User input required. Function performs checks etc that could be delegated to a different function. - Will require most work - Made it into CLI exclusive function


getChannelSize - high level functionality:
Welcome text
Request for channel ID
ask if custom cert is to be used (will need to delegate it earlier)
call getBearer
call getChannelInfo (Return JSON with response)
call parseChannel (Return a complete data frame)
call extractContentToDf (Returns a filtered Df)
initialize global lists and variables for expired and disabled content
Within the function:            ###This can be a separate function or couple functions###
    Analyze the filtered Df for disabled or expired content and count it
    User input on if the disabled/expired content should be counted
        Input validation
    If user doesn't want to include the content
        Remove content IDs from Df
Turn Df["contentID"] To a list
call calculateSize(pass the list, returns an int)
call roundResult(Returns readable string)
If errors were encountered in calculateSize - Inform the user
Print total channel size


Required changes/adjustments
channel.py - create a GUI function only, once CLI is finished - done!
libraries.py - to change: create a GUI functions only, once CLI is finished - done!
reservations.py - create a GUI function only, once CLI is finished - done!
__init__ - Once modules are ready, package it.


-------------------------------------------------------------Done on 15.04.2025-------------------------------------------------------------

Remaining goals:
Create a way to launch the script with gui or cli using flags - done!
Write the gui version - done!

Go back to menu button re-triggers last state - done!

-------------------------------------------------------------Done on 17.04.2025-------------------------------------------------------------

Got functionality on par with CLI version

Now need to figure out error handling for user input, and will be able to go back to adding more functions.